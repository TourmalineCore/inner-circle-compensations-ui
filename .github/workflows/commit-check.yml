name: Check lint and cypress tests

on:
  push:
    branches: [ feature/* ]

jobs:
  check-lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js 18.14.1
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.1

      - name: Cache dependencies
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          npm i

      - name: Check linting
        run: npm run lint
        continue-on-error: false

  install:
    runs-on: ubuntu-22.04
    needs: check-lint
    container:
      image: cypress/browsers:node-18.14.1-chrome-111.0.5563.146-1-ff-111.0.1-edge-111.0.1661.54-1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress install
        uses: cypress-io/github-action@v5
        with:
          runTests: false
          build: npm run build

      - name: Save build folder
        uses: actions/upload-artifact@v3
        with:
          name: build
          if-no-files-found: error
          path: build
  
  components-test:
    runs-on: ubuntu-22.04 
    container: cypress/browsers:node-18.14.1-chrome-111.0.5563.146-1-ff-111.0.1-edge-111.0.1661.54-1
    strategy:
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download the build folders
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Components test
        uses: cypress-io/github-action@v5
        with:
          component: true
          start: npm start
          browser: chrome
          record: true
          parallel: true
          group: "Chrome component"
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}

  e2e-test:
    runs-on: ubuntu-22.04
    needs: install
    steps:
      - name: Checkout ui
        uses: actions/checkout@v4

      - name: Checkout local-env
        uses: actions/checkout@v4
        with:
          repository: TourmalineCore/inner-circle-local-env

      - name: Set up Docker
        uses: docker/setup-docker-action@v2

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install Helmfile
        run: |
          # Установка Helmfile
          curl -Lo helmfile.tar.gz https://github.com/helmfile/helmfile/releases/download/v0.156.0/helmfile_0.156.0_linux_amd64.tar.gz
          tar -xzf helmfile.tar.gz
          sudo mv helmfile /usr/local/bin/
          rm helmfile.tar.gz

      - name: Deploy Local Env to Kind k8s
        run: |
          kind create cluster --name inner-circle --config kind-local-config.yaml --kubeconfig ./.inner-circle-cluster-kubeconfig
          export KUBECONFIG=$(pwd)/.inner-circle-cluster-kubeconfig

          echo "Waiting for cluster to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=120s

          echo "Cluster info:"
          kubectl cluster-info
          kubectl get nodes

          echo "Exporting logs for debugging..."
          kind export logs --name inner-circle

          echo "Setting up Helmfile..."
          echo -e "\nimage:\n  tag: \"${{ github.sha }}\"" >> ./deploy/values-compensations-ui.yaml.gotmpl
          helmfile cache cleanup
          helmfile --kubeconfig $(pwd)/.inner-circle-cluster-kubeconfig --environment local --namespace local -f deploy/helmfile.yaml apply

      # currently there's a risk that when we run this step the cluster is already destroyed since it was created in a previous step
      # for the sake of simlicity it is kept like this here
      # however, in production with longer pipelines: more services and more tests it will most likely start causing issues
      # creation of the cluster and deployment to it should be in the same step as the e2e tests running 
      # - name: Cypress run
      #   uses: cypress-io/github-action@v6
      #   with:
      #     spec: "cypress/e2e/compensations-smoke.cy.ts"
      #     browser: chrome
      #     record: true
      #     parallel: true
      #     group: "Chrome e2e local-env"
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #     CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
      #     CYPRESS_BASE_URL: http://localhost:40100
      #     API_ROOT: /api
      #     API_ROOT_AUTH: /api/auth,
      #     LINK_TO_COMPENSATIONS_SERVICE: /compensations
      #     USER_LOGIN: ceo@tourmalinecore.com,
      #     USER_PASSWORD: cEoPa$$wo1d,