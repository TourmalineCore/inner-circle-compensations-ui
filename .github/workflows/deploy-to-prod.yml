name: Deploy compensations to prod k8s

on:
  push:
    branches:
      - master
  pull_request:

env:
  GITHUB_REGISTRY: ghcr.io

jobs:
  push_to_registry:
    name: Push Docker image to Git Registry
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
      attestations: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      # multi-platform build configured using this https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/tourmalinecore/${{ github.event.repository.name }}
          tags: |
            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long
            # set latest tag for default branch
            # https://github.com/docker/metadata-action/issues/171 explains how to tag latest only on default branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
  
  deploy-to-prod-k8s:
    needs: push_to_registry
    name: Deploy service to k8s for prod environment  
    if: github.event_name == 'push'
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Deploy
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: |
            RELEASE_NAME=compensations
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm upgrade --install --namespace dev-inner-circle --create-namespace --values ./ci/values.yaml \
            --set "image.tag=${{ github.sha }}" \
            --set "ingress.enabled=true" \
            --set "ingress.hostname=${{ secrets.DEV_HOST }}" \
            --set "extraConfigMapEnvVars.LINK_TO_SALARY_SERVICE=${{ secrets.DEV_LINK_TO_SALARY_SERVICE }}" \
            --set "extraConfigMapEnvVars.LINK_TO_ACCOUNT_SERVICE=${{ secrets.DEV_LINK_TO_ACCOUNT_SERVICE }}" \
            --set "extraConfigMapEnvVars.LINK_TO_COMPENSATIONS_SERVICE=${{ secrets.DEV_LINK_TO_COMPENSATIONS_SERVICE }}" \
            --set "extraConfigMapEnvVars.API_ROOT=${{ secrets.DEV_LINK_TO_API_SERVICE }}" \
            --set "extraConfigMapEnvVars.API_ROOT_AUTH=${{ secrets.DEV_LINK_TO_API_ROOT_AUTH }}" \
            --set "extraConfigMapEnvVars.ENV_KEY=${{ secrets.DEV_ENV }}" \
            "${RELEASE_NAME}" \
            bitnami/nginx --version 15.0.2
          kubeconfig: "${{ secrets.DEV_KUBECONFIG }}"

  e2e-test-prod:
    runs-on: ubuntu-22.04
    container: cypress/browsers:node-18.14.1-chrome-111.0.5563.146-1-ff-111.0.1-edge-111.0.1661.54-1
    if: github.event_name == 'push'
    needs: deploy-to-prod-k8s
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: E2E test on prod
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          record: true
          parallel: true
          group: "Chrome e2e prod"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_BASE_URL: ${{ secrets.DEV_BASE_URL }}
          API_ROOT: ${{ secrets.TEST_LINK_TO_API_SERVICE }}
          API_ROOT_AUTH: ${{ secrets.TEST_LINK_TO_API_ROOT_AUTH }}
          LINK_TO_COMPENSATIONS_SERVICE: ${{ secrets.TEST_LINK_TO_COMPENSATIONS_SERVICE }}
          USER_LOGIN: ${{ secrets.DEV_USER_LOGIN }}
          USER_PASSWORD: ${{ secrets.DEV_USER_PASSWORD }}